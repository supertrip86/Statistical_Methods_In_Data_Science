get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low | t <= upp) | (-t >= low | -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
x
summary(x)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low | t <= upp) | (-t >= low | -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
print(t)
print(conf_int[i, j])
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low | t <= upp) | (-t >= low | -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
print(t)
print(low,upp)
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low | t <= upp) | (-t >= low | -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
print(t)
print(c(low,upp))
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low | t <= upp) & (-t >= low | -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
print(t)
print(c(low,upp))
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
summary(x)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low & t <= upp) & (-t >= low & -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
print(t)
print(c(low,upp))
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
x
summary(x)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low & t <= upp) & (-t >= low & -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
x <- get_estimates(asd_sel)
summary(x)
x <- get_estimates(asd_sel, appl_bonf = F)
summary(x)
library(igraph)
G <- graph_from_adjacency_matrix(adjmatrix)
adjacency_matrix <- get_estimates(asd_sel)
summary(x)
G <- graph_from_adjacency_matrix(adjmatrix)
G <- graph_from_adjacency_matrix(adjacency_matrix)
gsize(G)
V(G)
E(G)
lenght(E(G))
length(E(G))
length(V(G))
G <- graph_from_adjacency_matrix(adjacency_matrix)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel)
G <- graph_from_adjacency_matrix(adjacency_matrix)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
G <- graph_from_adjacency_matrix(adjacency_matrix)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel)
G <- graph_from_adjacency_matrix(adjacency_matrix)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel, appl_bonf = F)
G <- graph_from_adjacency_matrix(adjacency_matrix)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel)
G <- graph_from_adjacency_matrix(adjacency_matrix, directed=F)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel, appl_bonf = F)
G <- graph_from_adjacency_matrix(adjacency_matrix, directed=F)
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
?graph_from_adjacency_matrix
adjacency_matrix <- get_estimates(asd_sel)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel, appl_bonf = F)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
library(igraph)
setwd("D:/Daniel_Jimenez/Data_Science_master_Sapienza_University/SDS/SDS_Homework3")
load("hw3_data.RData")
dim(asd_sel[[1]])
td_sel[[1]]
library(igraph)
setwd("D:/Daniel_Jimenez/Data_Science_master_Sapienza_University/SDS/SDS_Homework3")
load("hw3_data.RData")
dim(asd_sel[[1]])
td_sel[[1]]
dim(td_sel[[1]])
corrs_asd_sel <- lapply(asd_sel, cor)
corrs_td_sel <- lapply(td_sel, cor)
corrs_asd_sel[[1]]
dim(corrs_asd_sel[[1]])
length(td_sel)
get_estimates <-function(data,alpha = 0.05, appl_bonf = T, categories = 2){
correlations <- lapply(data, cor)
aux <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
# print(dim(aux))
for (i in 1:length(data)){
for (j in 1:dim(correlations[[i]])[1]){
for (k in 1:dim(correlations[[i]])[2]){
# aux[j,k] <- paste(aux[j, k],correlations[[i]][j, k], sep=",")
# print(correlations[[i]][j, k])
aux[j, k] <- list(append(unlist(aux[j, k]),correlations[[i]][j, k],after = length(aux[j, k])))
# print(aux[j,k])
}
}
}
percentiles <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
conf_int <- matrix(data = list(),nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
adj_mat <- matrix(data = NA,nrow = dim(correlations[[1]])[1],ncol = dim(correlations[[1]])[2])
for (i in 1:dim(aux)[1]){
for (j in 1:dim(aux)[2]){
percentiles[i, j] <-  quantile(unlist(aux[i, j]), p = 0.8)
aux_fisher <-  0.5*(log(1 + unlist(aux[i, j])) - log(1 - unlist(aux[i, j])))
aux_fisher[is.infinite(aux_fisher)] <- 1
if(appl_bonf == T){
alpha_bonf <- alpha / categories
z_bonf <- qnorm(1 - alpha_bonf / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z_bonf*sqrt((1/n)/n)))
} else{
z <- qnorm(1 - alpha / 2)
n <- length(data)
conf_int[i, j] <- list(tanh(mean(aux_fisher) + c(-1,1)*z*sqrt((1/n)/n)))
}
low <- unlist(conf_int[i, j])[1]
upp <- unlist(conf_int[i, j])[2]
t <- percentiles[i, j]
if((t >= low & t <= upp) & (-t >= low & -t <= upp)){
adj_mat[i, j] <- 0
} else {
adj_mat[i, j] <- 1
}
}
}
diag(adj_mat) <- 0
return(adj_mat)
}
adjacency_matrix <- get_estimates(asd_sel)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
adjacency_matrix <- get_estimates(asd_sel, appl_bonf = F)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
degree_distribution(G, cumulative = FALSE, ...)
degree_distribution(G)
plot(degree_distribution(G))
degree(G)
plot(hist(degree(G)))
x <- data.frame(v1=rnorm(100),v2=rnorm(100,1,1),v3=rnorm(100,0,2))
library(ggplot2);library(reshape2)
data<- melt(x)
data
degrees_df <- data.frame(bonferroni = "With Bonferroni", degrees = degree(G))
degrees_df
degrees_with_bonf <- data.frame(bonferroni = "With Bonferroni", degrees = degree(G))
degrees_without_bonf <- data.frame(bonferroni = "Without Bonferroni", degrees = degree(G))
df_to_plot <- rbdin(degrees_with_bonf,degrees_without_bonf)
df_to_plot <- rbind(degrees_with_bonf,degrees_without_bonf)
df_to_plot
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25)
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_histogram(alpha=0.25)
ggplot(df_to_plot,aes(x=bonferroni, y=degrees, fill=bonferroni)) + geom_boxplot()
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_histogram(alpha=0.25)
ggplot(df_to_plot,aes(x=bonferroni, y=degrees, fill=bonferroni)) + geom_boxplot()
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25)
adjacency_matrix <- get_estimates(asd_sel, categories = 116)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
degrees_with_bonf <- data.frame(bonferroni = "With Bonferroni", degrees = degree(G))
adjacency_matrix <- get_estimates(asd_sel, categories = 116, appl_bonf = F)
G <- graph_from_adjacency_matrix(adjacency_matrix, mode = "undirected")
E <- length(E(G))
V <- length(V(G))
plot(G, vertex.color="dodgerblue4", main=paste("Undirected Graph with ", V," vertexes and ", E, " edges",sep=""), vertex.label.color="white")
degrees_without_bonf <- data.frame(bonferroni = "Without Bonferroni", degrees = degree(G))
df_to_plot <- rbind(degrees_with_bonf,degrees_without_bonf)
library(ggplot2)
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25)
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_histogram(alpha=0.25)
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25)
+ scale_fill_manual(values=c("#00ff00","#ff0000"))
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25) + scale_fill_manual(values=c("#00ff00","#ff0000"))
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.25) + scale_fill_manual(values=c("#0c2141","#940f15"))
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.8) + scale_fill_manual(values=c("#0c2141","#940f15"))
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.7) + scale_fill_manual(values=c("#0c2141","#940f15"))
ggplot(df_to_plot,aes(x=degrees, fill=bonferroni)) + geom_density(alpha=0.7) + scale_fill_manual(values=c("#2e598f","#940f15"))
