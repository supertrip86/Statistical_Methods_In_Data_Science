"0","get_random_integer = function(value) {"
"0","  # This function picks randomly (uniformly) one of the pages that have been added so"
"0","  # far to our network simulation."
"0","  # Since every page is labelled as an integer going from 1 to the current iteration"
"0","  # value, we simply generate a random number belonging to such interval. To avoid "
"0","  # the very small chance that the link will point to the page itself, we simply "
"0","  # consider ""max=value"" rather than ""max=value + 1""."
"0","  "
"0","  result = floor(runif(1, min=1, max=value))"
"0","  return (result)"
"0","}"
"0","get_random_link = function(m, value) {"
"0","  # In this case we select randomly (uniformly) a single link out of the vector ""m""."
"0","  # In ""m"" we have inserted every link SO FAR created (until the current iteration"
"0","  # ""i"", which produced the edge labelled as ""value"", with i == value), therefore "
"0","  # we have a much higher chance to select from ""m"" a link to a page that has a "
"0","  # high number of links attached to it. Since the the current ""value"" is not in"
"0","  # the vector ""m"", the fact that the generated link will be an ""outlink"" is guaranteed."
"0","  "
"0","  links = to_vector(m)"
"0","  maxVal = length(links) + 1"
"0","  result = floor(runif(1, min=1, max=maxVal))"
"0","  "
"0","  return (links[result])"
"0","}"
"0","to_vector = function(listVar) {"
"0","  # This is a simple function that converts any list to a vector."
"0","  "
"0","  return (unlist(listVar, use.names=FALSE))"
"0","}"
"0","set_initial_edges = function() {"
"0","  # This is a container for the commands to generate the starting graph "
"0","  # containing 4 edges connected to each other as a directed cycle on 4 vertices."
"0","  loop = rep(1:4, each = 2)"
"0","  vertices = c(loop[-1], loop[1])"
"0","  return (vertices)"
"0","}"
"0","create_graph_data = function(start, end, gamma) {"
"0","  # This is the function that generates a random edge for each newly created vertex."
"0","  # Each vertex is labelled as an integer going from ""start"" to ""end"", and can be"
"0","  # considered as an additional page added iteratively to our simulation model. Our"
"0","  # goal is to associate to each page a single link (edge) to a different page"
"0","  # (vertex). Of course, the link has to point to a different page, not to itself."
"0","  # We proceed as follows: we create two different lists, ""l"" and ""m"". In ""l"" we "
"0","  # append, at every iteration, the newly created edge AND a randomly generated"
"0","  # link pointing to a different page (outlink), while in ""m"" we append only the "
"0","  # randomly generated link."
"0","  # This link will be either:"
"0","  #"
"0","  # 1- Created so that it picks randomly one of the pages SO FAR existing in the graph"
"0","  #    (added up to the current iteration), with probability gamma."
"0","  #"
"0","  # 2- Copied among the elements of the list ""m"", containing all the links existing "
"0","  #    SO FAR (added to the graph up to the current iteration), with probability "
"0","  #    1 - gamma. Since every existing link is in ""m"", duplications included, it is way"
"0","  #    more probable to copy one of the links pointing to a popular page than to copy any"
"0","  #    of those few links pointing to a rarely referenced page."
"0","  #"
"0","  # At the end of the iteration, we are interested in the list ""l"" containing the sequence"
"0","  # of all the edges, going from vertex ""i"" to vertex ""x"", for every ""i"" and ""x"" belonging"
"0","  # to ""l"". Eventually, we convert ""l"" to a vector and return the result."
"0","  l = list()"
"0","  m = list(1,2,3,4)"
"0","  for (i in seq(start,end)) {"
"0","    p = rbernoulli(1, p = gamma)"
"0","    "
"0","    if (p) {"
"0","      x = get_random_integer(i)"
"0","      "
"0","    } else {"
"0","      x = get_random_link(m, i)"
"0","    }"
"0","    l = append(list(i,x), l)"
"0","    m = append(list(x), m)"
"0","  }"
"0","  data = to_vector(l)"
"0","  return (data)"
"0","}"
"0","generate_graph = function(end) {"
"0","  gamma = 0.5   # the probability of choosing a link at random among all the pages"
"0","  initial_vertices = 4   # the number of vertices of the initial graph"
"0","  initial_edges = set_initial_edges()   # the edges of the initial graph"
"0","  start = initial_vertices + 1    # the starting value of the interval"
"0","  increment = end - start + 1   # the number of vertices to add to the initial graph"
"0","  data = create_graph_data(start, end, gamma)   # creates an edge for each additional vertex"
"0","  "
"0","  grph <- make_empty_graph() %>%          # initialize an empty graph"
"0","    add_vertices(initial_vertices) %>%    # add the first 4 vertices"
"0","    add_edges(initial_edges) %>%          # add the first 4 edges"
"0","    add_vertices(increment) %>%           # add to the initial graph the remaining vertices"
"0","    add_edges(data)                       # add to the initial graph the remaining edges "
"0","  "
"0","  return (grph)"
"0","}"
"0","a = generate_graph(10000)"
"0","plot("
"0","     a,"
"0","     edge.width=1,"
"0","     edge.arrow.size=0.1,"
"0","     vertex.size=1,"
"0","     vertex.label.cex=0.1"
"0","     )"
