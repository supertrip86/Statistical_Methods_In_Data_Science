"0","# Calculating the starting time of the random max-cut algorithm over the small graph with 7 nodes and 7 edges"
"0","startTime <- Sys.time()"
"0","# Pre-allocating a vector proportional to the number of the nodes of the graph"
"0","vecOfOutcomes <- rep(NA, nrow(graph_nodes))"
"0","# Inserting the outcomes, simulated from a coin toss with binomial distribution, into a vector"
"0","for (i in 1:nrow(graph_nodes)){"
"0","    outcome <- rbinom(1, 1, 0.5)"
"0","    vecOfOutcomes[i] <- outcome"
"0","}"
"0","# Getting the size of set U (U has to be created in the next lines)"
"0","count <- 0"
"0","for (i in 1:length(vecOfOutcomes)){"
"0","    if (vecOfOutcomes[i] == 1){"
"0","        count <- count + 1"
"0","    }"
"0","}"
"0","# Pre-allocating and creating the U set randomly, based on the previuos binomial simulation"
"0","U <- rep(NA, count)"
"0","indexOfU <- 0"
"0","for (i in 1:length(vecOfOutcomes)){"
"0","    if (vecOfOutcomes[i] == 1){"
"0","        indexOfU <- indexOfU + 1"
"0","        U[indexOfU] <- graph_nodes[i,1]"
"0","    }"
"0","}"
"0","# Check if the edges are inside set U (XOR conditioning) and get the cut"
"0","cut <- 0"
"0","for (row in 1:nrow(graph_edges)) {"
"0","    first <- graph_edges[row, ""from""]"
"0","    second  <- graph_edges[row, ""to""]"
"0","    if (xor(first %in% U,second %in% U)){"
"0","        cut <- cut + 1"
"0","    }"
"0","}"
