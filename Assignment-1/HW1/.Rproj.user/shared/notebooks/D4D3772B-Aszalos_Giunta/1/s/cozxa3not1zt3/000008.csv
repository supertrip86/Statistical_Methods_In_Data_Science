"0","# Getting the nodes of the graph and converting it into a dataframe"
"0","graph_nodes <- data.frame(node=c(as_ids(V(randomGraph))))"
"0","# Getting the edges of the graph and converting it into a renaimed dataframe"
"0","graph_edges <- data.frame(as_edgelist(randomGraph))"
"0","colnames(graph_edges) <- c(""from"",""to"")"
"0","# Calculating the starting time of the random max-cut algorithm over the graph with 100 nodes and 20 edges"
"0","startTime <- Sys.time()"
"0","# Pre-allocating a vector proportional to the number of the nodes of the graph"
"0","vecOfOutcomes <- rep(NA, nrow(graph_nodes))"
"0","# Inserting the outcomes, simulated from a coin toss with binomial distribution, into the vector"
"0","for (i in 1:nrow(graph_nodes)){"
"0","    outcome <- rbinom(1, 1, 0.5)"
"0","    vecOfOutcomes[i] <- outcome"
"0","}"
"0","# Getting the size of set U (to be created)"
"0","count <- 0"
"0","for (i in 1:length(vecOfOutcomes)){"
"0","    if (vecOfOutcomes[i] == 1){"
"0","        count <- count + 1"
"0","    }"
"0","}"
"0","# Pre-allocating and creating the U set randomly, based on the previuos binomial simulation"
"0","U <- rep(NA, count)"
"0","indexOfU <- 0"
"0","for (i in 1:length(vecOfOutcomes)){"
"0","    if (vecOfOutcomes[i] == 1){"
"0","        indexOfU <- indexOfU + 1"
"0","        U[indexOfU] <- graph_nodes[i,1]"
"0","    }"
"0","}"
"0","# Get the true OPT(G) or at very least a good approximation to OPT(G)"
"0","matrix <- as.matrix(as_adjacency_matrix(randomGraph,type = c(""both"")))"
"0","OPT <- round(maxcut(matrix)$pobj)"
"0","OPT <- abs(OPT)"
"0","# Check if the edges are inside set U (XOR conditioning) and get the cut"
"0","cut <- 0"
"0","for (row in 1:nrow(graph_edges)) {"
"0","    first <- graph_edges[row, ""from""]"
"0","    second  <- graph_edges[row, ""to""]"
"0","    if (xor(first %in% U,second %in% U)){"
"0","        cut <- cut + 1"
"0","    }"
"0","}"
"0","# Running the Randomized Max-Cut Algorithm a large number M of times"
"0","M = 10000"
"0","cutValues <- rep(NA, M)"
"0","for (j in 1:M){"
"0","    # Inserting the outcomes, simulated from a coin toss with binomial distribution, into the vector"
"0","    for (i in 1:nrow(graph_nodes)){"
"0","        outcome <- rbinom(1, 1, 0.5)"
"0","        vecOfOutcomes[i] <- outcome"
"0","    }"
"0","    # Getting the size of set U (to be created)"
"0","    count <- 0"
"0","    for (i in 1:length(vecOfOutcomes)){"
"0","        if (vecOfOutcomes[i] == 1){"
"0","            count <- count + 1"
"0","        }"
"0","    }"
"0","    # Pre-allocating and creating the U set randomly, based on the previuos binomial simulation"
"0","    U <- rep(NA, count)"
"0","    indexOfU <- 0"
"0","    for (i in 1:length(vecOfOutcomes)){"
"0","        if (vecOfOutcomes[i] == 1){"
"0","            indexOfU <- indexOfU + 1"
"0","            U[indexOfU] <- graph_nodes[i,1]"
"0","        }"
"0","    }"
"0","    # Check if the edges are inside set U (XOR conditioning) and get the cut"
"0","    cut <- 0"
"0","    for (row in 1:nrow(graph_edges)) {"
"0","        first <- graph_edges[row, ""from""]"
"0","        second  <- graph_edges[row, ""to""]"
"0","        if (xor(first %in% U,second %in% U)){"
"0","            cut <- cut + 1"
"0","        }"
"0","    }"
"0","    "
"0","    # Storing each cut value"
"0","    cutValues[j] <- cut"
"0","}"
"0","# Calculating the ending time of the random max-cut algorithm over the graph with 100 nodes and 20 edges, simulated M times"
"0","endTime <- Sys.time()"
"0","# Calculating the running time of the random max-cut algorithm simulated M times over the graph with 100 nodes and 20 edges"
"0","deltaTime <- endTime-startTime"
"0","# Some analysis over the cut-sized obtained from the M simulations"
"0","meanCut <- mean(cutValues)"
"0","maxCut <- max(cutValues)"
"0","minCut <- min(cutValues)"
"0","stanDev <- sd(cutValues)"
"0","coeffVariation <- round(stanDev/meanCut,2)"
"0","hist(cutValues, main = paste(""Histogram of average cut-size of the randomized max-cut algorithm""), xlab=""Size of the cut"", col=""orchid"", breaks=nrow(graph_edges))"
